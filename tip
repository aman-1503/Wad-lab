https://github.com/my-code-learning-area/wadl-practicals

https://github.com/Harshvardhan-Nishikant-Patil/CCL-PS/blob/main/SIXTH/main.py

https://github.com/Bhavana568/WADL-PS/tree/main

https://github.com/omkar2906/WADL/tree/master/src


mongo commands:
npm init -y
npm i express
npm i express mongoose body-parser
npm i ejs

in new terminal: 
mongosh
show dbs

mongo harsh:

const e = require('express')
const express = require('express')
const port = 4000
const app = express()
const mongoose = require('mongoose')

mongoose.connect('mongodb+srv://manas:manasraj@cluster0.gyynqrw.mongodb.net/Student?retryWrites=true&w=majority',{
    useNewUrlParser:true,
    useUnifiedTopology:true
}).then(()=>{
    console.log("Database connected")
})

const Studentschema = new mongoose.Schema({
    name:String,
    rollno:Number,
    wad:Number,
    dsbda:Number,
    cns:Number,
    cc:Number,
    ai:Number,
})

const Student = new mongoose.model("Student", Studentschema)

data = [
    {
      name: "Manas",
      rollno: 27,
      wad: 20,
      dsbda: 23,
      cns: 12,
      cc: 16,
      ai: 18,
    },
    {
      name: "Roku",
      rollno: 29,
      wad: 12,
      dsbda: 20,
      cns: 15,
      cc: 18,
      ai: 14,
    },
    {
      name: "Sid",
      rollno: 7,
      wad: 20,
      dsbda: 13,
      cns: 16,
      cc: 19,
      ai: 13,
    },
    {
      name: "Appu",
      rollno: 1,
      wad: 23,
      dsbda: 3,
      cns: 2,
      cc: 6,
      ai: 8,
    },
  ];
  
app.get('/' , async(req,res)=>{
    try{
        res.send("Hello World")
    }
    catch(err){
        console.log(err)
    }
})

app.get('/add' , async(req,res)=>{
    try{
        await Student.insertMany(data)
        res.send("Data added successfully") 
    }catch(err){
        console.log(err)
    }
})

app.get('/display' , async(req,res)=>{
    try{
        const students = await Student.find()
        const count = students.length
        res.send({TotalCount: count , students: students})
    }catch(err){
        console.log(err)
    }
})

app.get('/dsbda' , async(req,res)=>{
    try{
        const students = await Student.find({dsbda: {$gt : 10}})
        //console.log(students)
        const names = students.map((student)=>{
            //console.log(student.name)
            student.name
        })
    
        res.send(students)
        //res.send(studentNames)
    }catch(err){
        console.log(err)
    }
})

app.get('/update/:rollno', async(req,res)=>{
    try{
        const {rollno} = req.params
        const filter = {rollno: rollno}
        const update = {
            $inc:{
                wad:10,
                dsbda:10,
                cns:10,
                cc:10,
                ai:10
            }
        }
        const updatedStudent = await Student.findOneAndUpdate(filter , update , {new:true})
        if(updatedStudent)
        {
            res.json({message:"Updated successfully" , updatedStudent:updatedStudent})
        }
        else
        {
            res.send({message:"Student not found"})
        }
    }
    catch(err){
        console.log(err)
    }
})

app.get('/lessthan' , async(req,res)=>{
    try{
        const students = await Student.find(
            {
                wad:{$gt: 25},
                dsbda:{$gt: 25},
                cns:{$gt: 25},
                cc:{$gt: 25},
                ai:{$gt: 25}         
            }
        )
        if(students.length>0)
        {
            res.send(students)
        }
        else
        {
            res.send({message:"No student found"})
        }

    }catch(err){
        console.log(err)
    }
})

app.get('/delete/:rollno' , async(req,res)=>{
    try{
        const {rollno} = req.params
        const deleteStudent = await Student.deleteOne({rollno:rollno})

        if(deleteStudent )
        {
            res.send({message:"Deleted successfully"})
        }
        else
        {
            res.send({message:"Student not found"})
        }

    }catch(err){
        console.log(err)
    }

})

app.get('/table',async(req,res)=>{
    try{
        const students = await Student.find()
        const tableRows = students.map((student)=>{
            return(
                `<tr>
                    <td>${student.name}</td>
                    <td>${student.rollno}</td>
                    <td>${student.wad}</td>
                    <td>${student.dsbda}</td>
                    <td>${student.cns}</td>
                    <td>${student.cc}</td>
                    <td>${student.ai}</td>
                </tr>
                `
            )
        }
        );

        const table = `
        <table>
            <thead>
                <th>Name</th>
                <th>Roll No</th>
                <th>WAD</th>
                <th>DSBDA</th>
                <th>CNS</th>
                <th>CC</th>
                <th>AI</th>
            </thead>
            <tbody>
                ${tableRows.join("") }
            </tbody>
            
        </table>
        `;
        res.send(table)
    }catch(err){
        console.log(err)
    }
})

app.listen(port,()=>{
    console.log(`Server is running on port ${port}`)
})








import webapp2

class MainPage(webapp2.RequestHandler):
     def get(self):
          def recur_fibo(n):
                if n <= 1:
                     return n
                else:
                    return(recur_fibo(n-1) + recur_fibo(n-2))

          nterms = 8
          if nterms <= 0:
                self.response.write("Plese enter a positive integer")
          else:
                self.response.write("Fibonacci sequence upto 8 numbers : ")
                for i in range(nterms):
                     self.response.write(recur_fibo(i))
        
app = webapp2.WSGIApplication([('/',MainPage),], debug=True)










<!DOCTYPE html>
<html>
<head>
  <title>Table Generator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
  
    .container {
      text-align: center;
    }
  
    label {
      display: block;
      margin-bottom: 10px;
    }
  
    input[type="text"] {
      width: 200px;
      padding: 5px;
    }
  
    button {
      display: block;
      margin-top: 10px;
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
  
    table {
      border-collapse: collapse;
      margin-top: 20px;
    }
  
    td {
      border: 1px solid black;
      padding: 5px;
    }
  </style>
  
</head>
<body>
  <div class="container">
  <label for="input1">Enter values for Table 1 (rows#columns#starting value):</label>
  <input type="text" id="input1" />

  <label for="input2">Enter values for Table 2 (rows#columns#starting value):</label>
  <input type="text" id="input2" />

  <button onclick="generateTables()">Generate Tables</button>

  <table id="table1"></table>
  <table id="table2"></table>
  <table id="table3"></table>
  </div>
  <script>
    function generateTables() {
      var input1 = document.getElementById("input1").value;
      var input2 = document.getElementById("input2").value;
      var table1 = document.getElementById("table1");
      var table2 = document.getElementById("table2");

      var values1 = input1.split("#");
      var rows1 = parseInt(values1[0]);
      var columns1 = parseInt(values1[1]);
      var startingValue1 = parseInt(values1[2]);

      var values2 = input2.split("#");
      var rows2 = parseInt(values2[0]);
      var columns2 = parseInt(values2[1]);
      var startingValue2 = parseInt(values2[2]);

      table1.innerHTML = "";
      table2.innerHTML = "";

      for (var i = 0; i < rows1; i++) {
        var row = document.createElement("tr");
        for (var j = 0; j < columns1; j++) {
          var cell = document.createElement("td");
          var columnValue = startingValue1 + j;
          cell.textContent = columnValue * (i + 1);
          row.appendChild(cell);
        }
        table1.appendChild(row);
      }

      for (var i = 0; i < rows2; i++) {
        var row = document.createElement("tr");
        for (var j = 0; j < columns2; j++) {
          var cell = document.createElement("td");
          var columnValue = startingValue2 + j;
          cell.textContent = columnValue * (i + 1);
          row.appendChild(cell);
        }
        table2.appendChild(row);
      }

      if (rows1 == rows2 && columns1 == columns2) {
        var table3 = document.getElementById("table3");
        table3.innerHTML = "";
        for (var i = 0; i < rows1; i++) {
          var row = document.createElement("tr");
          for (var j = 0; j < columns1; j++) {
            var cell = document.createElement("td");
            var value1 = parseInt(table1.rows[i].cells[j].textContent);
            var value2 = parseInt(table2.rows[i].cells[j].textContent);
            if (value1 === value2) {
              cell.textContent = value1;
            } else {
              cell.textContent = value1 * value2;
            }
            row.appendChild(cell);
          }
          table3.appendChild(row);
        }
      }
    }
  </script>
</body>
</html>
